name: Build & Deploy to EC2

on:
  push:
    branches:
      - master

env:
  IMAGE_NAME: ggj8efv5gssrcdwjdzwidxei/elven-sre-api

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build da imagem Docker
        run: |
          docker build -t $IMAGE_NAME:latest --target production .

      - name: Push para o Docker Hub
        run: |
          docker push $IMAGE_NAME:latest

      - name: Deploy na EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            REPO_DIR=elven-sre-api

            # Remove o diretório anterior, se existir
            rm -rf $REPO_DIR

            # Clona o repositório
            git clone https://github.com/VitoorFranca/$REPO_DIR.git
            cd $REPO_DIR

            # Cria o arquivo .env com as variáveis necessárias
            cat <<EOF > .env
            NODE_ENV=production
            PORT=3000
            FRONTEND_URL=${{ secrets.FRONTEND_URL }}
            OTEL_EXPORTER_OTLP_ENDPOINT=${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
            LOG_LEVEL=${{ secrets.LOG_LEVEL }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            EOF

            # Faz pull da imagem mais recente
            docker pull $IMAGE_NAME:latest

            # Para os serviços existentes
            docker compose down || true

            # Sobe os serviços via docker-compose
            docker compose up -d --build